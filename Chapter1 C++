#include <iostream>

int* cin_array(int len)
{
	int* output;
	output = new int[len];

	for (int i = 0; i < len; i++) {
		std::cin >> output[i];
	}

	return output;
}

void swap(int* a, int* b)
{
	int t = *a;
	*a = *b;
	*b = t;
}

void printArray(int arr[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", arr[i]);
	printf("\n");
}

int partition(int arr[], int low, int high)
{
	int pivot = arr[high];    // pivot 
	int i = (low - 1);  // Index of smaller element 

	for (int j = low; j <= high - 1; j++)
	{
		// If current element is smaller than or 
		// equal to pivot 
		if (arr[j] <= pivot)
		{
			i++;    // increment index of smaller element 
			swap(&arr[i], &arr[j]);
		}
	}
	swap(&arr[i + 1], &arr[high]);
	return (i + 1);
}

void sort(int* arr, int low, int high)
{
	if (low < high)
	{
		int pi = partition(arr, low, high);

		sort(arr, low, pi - 1);
		sort(arr, pi + 1, high);
	}
}

void linear_search(int num, int* arr, int len)
{
	int steps = 0;
	for (int i = 0; i < len; i++)
	{
		steps += 1;
		if (arr[i] == num)
		{
			std::cout << "Linear search - Index: " << i << "; Steps: " << steps << std::endl;
			return;
		}
	}

	std::cout << "Linear search - Index: " << "NONE" << "; Steps: " << steps << std::endl;
	return;
}

void binary_search(int num, int* arr, int len)
{
	int steps = 0;
	int min = 0;
	int max = len - 1;

	do {
		int mid = (min + max) / 2;
		steps += 1;

		if (arr[mid] == num)
		{
			std::cout << "Linear search - Index: " << mid << "; Steps: " << steps << std::endl;
			return;
		}

		if (arr[mid] > num)
			max = mid - 1;
		else
			min = mid + 1;

	} while (min <= max);

	std::cout << "Linear search - Index: " << "NONE" << "; Steps: " << steps << std::endl;
	return;
}

int main() {
	int* arr;
	int len;

	std::cout << "Ievadiet, ludzu, massiva garumu un pasu massivu:" << std::endl;
	std::cin >> len;
	arr = cin_array(len);

	std::cout << "Sortesana... ";
	sort(arr, 0, len - 1);
	std::cout << "Gatavs!" << std::endl;
	printArray(arr, len);
	std::cout << "\n";

	int num;
	std::cin >> num;
	linear_search(num, arr, len);
	binary_search(num, arr, len);

	delete[] arr;
	system("pause");
	return 0;
}
